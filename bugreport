#!/usr/bin/perl
# vim: ts=4 sw=4 nowrap

# Generate a report of the release-critical bugs for packages

use Getopt::Std;
require scanlib;
require bugcfg;
use strict;
use warnings;

my $Version		= "BugReport 1.4\nCopyright (C) 1998-2002 Wichert Akkerman <wakkerma\@debian.org>\n";
my $html		= 0;
my $statusfile		= "status";

sub ShowVersion() {
	print "$Version\n";
	exit 0;
}

sub ShowUsage() {
	print <<EOF;
Usage:
  $0 [-V] [-h] [-H] [-l] [-s] [-d distrib] [-S file] [-C file]
Options:
  -V    show version
  -h    show some (hopefully) helpful information
  -H    produce HTML output
  -l    list all release-critical bugs
  -s    list bug statistics
  -t    show bugs relevant for testing only
  -d    only list these distributions (comma-separated)
  -S    use different statusfile
EOF
	exit 0;
}

sub PrintPackageHeader() {
	my $p	= shift;	# Package to print
	my ($name, $email);	# Name & email of maintainer

	if ($html) {
		print "<div class=\"package\"><pre>";
		print "<a name=\"$p\"><strong>Package:</strong></a> " . scanlib::wwwname($p);
		print " ($scanlib::section{$p}).\n";
		print "<strong>Maintainer:</strong> ";
		if (defined($scanlib::maintainer{$p})) {
			if ($scanlib::maintainer{$p} =~ /(.*) <([^>]*)>/) {
				($name,$email) = ($1,$2);
			} elsif ($scanlib::maintainer{$p} =~ /<(.*) \((.*)\)>/) {
				($name,$email) = ($1,$2);
			} elsif ($scanlib::maintainer{$p} =~ /<(.*)>/) {
				$name = $email = $1;
			}
			print "$name &lt;<a href=\"http://bugs.debian.org/$email\">$email</A>&gt;\n";
		} else {
			print "unknown\n";
		}
	} else {
		print "\nPackage: $p ($scanlib::section{$p})\n";
		print "Maintainer: " . (defined($scanlib::maintainer{$p}) ? $scanlib::maintainer{$p} : "unknown") . "\n";
	}
}

sub PrintPackageFooter() {
	my $p	= shift;	# Package to print

	if ($html) {
		print "</pre></div>\n";
	}
}

sub MakeBuglist() {
	my $p;				# Index variable
	my $nr;			# Current bugnumber
	my $sect;			# BTS-subsection for bugnumber
	my $header;		# Flag if packagename has already been printed

	for my $p (sort {$a cmp $b} keys %scanlib::packagelist) {
		next if (defined $bugcfg::exclude{$p});
		$header = 0;
		for $nr (sort @{$scanlib::packagelist{$p}}) {
			next if (defined $bugcfg::exclude{$nr});
			if (! $header) {
				$header = 1;
				&PrintPackageHeader($p);
			}

			if ($html) {
				my $worry = scanlib::check_worry($scanlib::bugs{$nr});
			
				if ($scanlib::bugs{$nr} =~ m/ \[[^]]*X/) {
					print '<span style="color: #808080">';
				} elsif ($scanlib::bugs{$nr} =~ m/^\[[^]]*P/) {
					print '<span style="color: #f040d0">';
				} elsif ($scanlib::bugs{$nr} =~ m/^\[[^]]*\+/) {
					print '<span style="color: #00aa00">';
				} elsif ($scanlib::bugs{$nr} =~ m/^\[[^]]*H/) {
					print '<span style="color: #ffaa30">';
				}
				print "<strike>" if ($scanlib::bugs{$nr} =~ m/^\[.......I\]/);
				print "<em class=\"worry\">" if $worry;
				($sect=$nr) =~ s/([0-9]{2}).*/$1/;
				print "<A NAME=\"$nr\"></A>  " . scanlib::wwwnumber($nr) . ' ' .
					  scanlib::htmlsanit($scanlib::bugs{$nr}) . "\n";
				print "</em>" if $worry;
				print "</strike>" if ($scanlib::bugs{$nr} =~ m/^\[.......I\]/);
			} else {
				printf("  %-6d %s\n", $nr, $scanlib::bugs{$nr});
			}
			print "</span>" if ($html && ($scanlib::bugs{$nr} =~ m/^\[[^]]*[H+P]/ ||
			                              $scanlib::bugs{$nr} =~ m/ \[[^]]*X/));
		}
		if ($header) {
			&PrintPackageFooter($p);
		}
	}
}


sub MakeStatistics() {
	my $bugcount=0;		# Total number of bugs so far
	my $patchtotal=0;	# Total number of bugs marked patch
	my $pendingtotal=0;	# Total number of bugs marked pending
	my $ignoretotal=0;	# Total number of bugs marked ignore
	my $nottestingtotal=0;	# Total number of bugs on packages not in testing
	my $worrytotal=0;	# Total number of bugs we're actually worried about
	my %list;		# List of bugnumber associated with package

	for my $p (sort keys %scanlib::packagelist) {
		my $count = 0;		# Number of bugs for this package

		next if (defined $scanlib::exclude{$p});
		for my $nr (@{$scanlib::packagelist{$p}}) {
			$pendingtotal++ if ($scanlib::bugs{$nr} =~ m/^\[[^]]*P/);
			$patchtotal++ if ($scanlib::bugs{$nr} =~ m/^\[[^]]*\+/);
			$ignoretotal++ if ($scanlib::bugs{$nr} =~ m/^\[[^]]*I/);
			$nottestingtotal++ if ($scanlib::bugs{$nr} =~ m/ \[[^]]*X/);
			$worrytotal++ if (scanlib::check_worry($scanlib::bugs{$nr}));

			if (not defined($scanlib::exclude{$nr})) {
				$bugcount++;
				$count++;
			} 
		}
	}

	if ($html) {
		print "<strong>Total number of release-critical bugs:</strong> $bugcount<BR>\n";
		printf("<strong>Number that have a patch:</strong> %d<BR>\n", $patchtotal);
		printf("<strong>Number that have a fix prepared and waiting to upload:</strong> %d<BR>\n", $pendingtotal);
		printf("<strong>Number that are being ignored:</strong> %d<BR>\n", $ignoretotal);
		printf("<strong>Number on packages not in testing:</strong> %d<BR>\n", $nottestingtotal);
		printf("<strong>Number concerning the next release (excluding ignored and not-in-testing):</strong> %d<P>\n", $worrytotal);
	} else {
		print "Total number of release-critical bugs: $bugcount\n";
		printf("Number that have a patch: %d\n", $patchtotal);
		printf("Number that have a fix prepared and waiting to upload: %d\n", $pendingtotal);
		printf("Number that are being ignored: %d\n", $ignoretotal);
		printf("Number on packages not in testing: %d\n", $nottestingtotal);
		printf("Number concerning the next release (excluding ignored and not-in-testing): %d\n", $worrytotal);
	}
}


sub FilterPackages($) {
	my $filter = shift;		# Distribution we want to keep

	for my $p (sort keys %scanlib::packagelist) {
		delete $scanlib::packagelist{$p} unless ($scanlib::section{$p} =~ m/^$filter/);
	}
}

sub FilterBugs() {
	for my $p (sort keys %scanlib::packagelist) {
		$scanlib::packagelist{$p} = [ grep { scanlib::check_worry($scanlib::bugs{$_}) } @{$scanlib::packagelist{$p}} ];
		delete $scanlib::packagelist{$p} if (scalar @{$scanlib::packagelist{$p}} == 0);
	}
}

our ($opt_h,$opt_V,$opt_S,$opt_H,$opt_d,$opt_t,$opt_s,$opt_l);

getopts('VhHlstd:S:');
ShowUsage if ($opt_h);
ShowVersion if ($opt_V);
$statusfile=$opt_S if ($opt_S);
$html=1 if ($opt_H);

scanlib::readstatus($statusfile);

FilterPackages($opt_d) if ($opt_d);
FilterBugs() if ($opt_t);

MakeStatistics if ($opt_s);
if ($opt_l) {
	MakeBuglist();
}

exit 0;

