#!/usr/bin/perl
# vim: ts=8 sw=8 nowrap

# Generate a report of the release-critical bugs for packages

use Getopt::Std;
require scanlib;
require bugcfg;
use strict;
use warnings;

my $Version		= "BugReport 1.4\nCopyright (C) 1998-2002 Wichert Akkerman <wakkerma\@debian.org>\n";
my $html		= 0;
my $statusfile		= "status";

sub ShowVersion() {
	print "$Version\n";
	exit 0;
}

sub ShowUsage() {
	print <<EOF;
Usage:
  $0 [-V] [-h] [-H] [-l] [-s] [-b] [-t] [-d distrib] [-S file] [-C file]
Options:
  -V    show version
  -h    show some (hopefully) helpful information
  -H    produce HTML output
  -l    list all release-critical bugs
  -s    list bug statistics
  -b    show bugs relevant for stable only
  -t    show bugs relevant for testing only
  -d    only list these distributions (comma-separated)
  -S    use different statusfile
EOF
	exit 0;
}

sub PrintPackageHeader() {
	my $p	= shift;	# Package to print
	my ($name, $email);	# Name & email of maintainer

	if ($html) {
		print "<div class=\"package\"><pre>";
		print "<a name=\"$p\"><strong>Package:</strong></a> " . scanlib::wwwname($p);
		if (defined($scanlib::section{$p})) {
			print " ($scanlib::section{$p}).\n";
		} else {
			print " (unknown).\n";
		}
		print "<strong>Maintainer:</strong> ";
		if (exists($scanlib::maintainer{$p}) && $scanlib::maintainer{$p} ne '') {
			if ($scanlib::maintainer{$p} =~ /(.*) <([^>]*)>/) {
				($name,$email) = ($1,$2);
			} elsif ($scanlib::maintainer{$p} =~ /<(.*) \((.*)\)>/) {
				($name,$email) = ($1,$2);
			} elsif ($scanlib::maintainer{$p} =~ /<(.*)>/) {
				$name = $email = $1;
			}
			if (defined($name)) {
				print "$name &lt;<a href=\"http://bugs.debian.org/$email\">$email</A>&gt;\n";
			} else {
				print "$scanlib::maintainer{$p}\n";
			}
		} else {
			print "unknown\n";
		}
	} else {
		print "\nPackage: $p ($scanlib::section{$p})\n";
		print "Maintainer: " . (defined($scanlib::maintainer{$p}) ? $scanlib::maintainer{$p} : "unknown") . "\n";
	}
}

sub PrintPackageFooter() {
	my $p	= shift;	# Package to print

	if ($html) {
		print "</pre></div>\n";
	}
}

sub MakeBuglist() {
	my $p;				# Index variable
	my $nr;			# Current bugnumber
	my $sect;			# BTS-subsection for bugnumber
	my $header;		# Flag if packagename has already been printed

	for my $p (sort {$a cmp $b} keys %scanlib::packagelist) {
		$header = 0;
		for $nr (sort @{$scanlib::packagelist{$p}}) {
			if (! $header) {
				$header = 1;
				&PrintPackageHeader($p);
			}

			if ($html) {
				my $worry = scanlib::check_worry($scanlib::bugs{$nr});
			
				if ($scanlib::bugs{$nr}->{'pending'}) {
					print '<span style="color: #f040d0">';
				} elsif ($scanlib::bugs{$nr}->{'patch'}) {
					print '<span style="color: #00aa00">';
				} elsif ($scanlib::bugs{$nr}->{'help'}) {
					print '<span style="color: #ffaa30">';
				}
				print "<strike>" if ($scanlib::bugs{$nr}->{'etch-ignore'} || $scanlib::bugs{$nr}->{'lenny-ignore'});
				print "<em class=\"worry\">" if $worry;
				($sect=$nr) =~ s/([0-9]{2}).*/$1/;
				printf "<A NAME=\"$nr\"></A>  %s [%s] [%s] %s\n", scanlib::wwwnumber($nr),
					scanlib::get_taginfo($scanlib::bugs{$nr}),
					scanlib::get_relinfo($scanlib::bugs{$nr}), 
					scanlib::htmlsanit($scanlib::bugs{$nr}->{'subject'});
				print "</em>" if $worry;
				print "</strike>" if ($scanlib::bugs{$nr}->{'etch-ignore'} || $scanlib::bugs{$nr}->{'lenny-ignore'});
			} else {
				printf("  %-6d [%s] [%s] %s\n", $nr, scanlib::get_taginfo($scanlib::bugs{$nr}),
					scanlib::get_relinfo($scanlib::bugs{$nr}), $scanlib::bugs{$nr}->{'subject'});
			}
			print "</span>" if ($html && ($scanlib::bugs{$nr}->{'pending'} ||
			                              $scanlib::bugs{$nr}->{'patch'} ||
										  $scanlib::bugs{$nr}->{'help'}));
		}
		if ($header) {
			&PrintPackageFooter($p);
		}
	}
}


sub MakeStatistics() {
	my $bugcount=0;		# Total number of bugs so far
	my $patchtotal=0;	# Total number of bugs marked patch
	my $pendingtotal=0;	# Total number of bugs marked pending
	my $ignoretotal=0;	# Total number of bugs marked ignore
	my $worrytotal=0;	# Total number of bugs we're actually worried about
	my $stabletotal=0;	# Total number of bugs affecting stable
	my %list;		# List of bugnumber associated with package

	for my $p (sort keys %scanlib::packagelist) {
		my $count = 0;		# Number of bugs for this package

		for my $nr (@{$scanlib::packagelist{$p}}) {
			$pendingtotal++ if ($scanlib::bugs{$nr}->{'pending'});
			$patchtotal++ if ($scanlib::bugs{$nr}->{'patch'});
			$ignoretotal++ if ($scanlib::bugs{$nr}->{'etch-ignore'} || $scanlib::bugs{$nr}->{'lenny-ignore'});
			$worrytotal++ if (scanlib::check_worry($scanlib::bugs{$nr}));
			$stabletotal++ if (scanlib::check_worry_stable($scanlib::bugs{$nr}));

			$bugcount++;
			$count++;
		}
	}

	if ($html) {
		print "<strong>Total number of release-critical bugs:</strong> $bugcount<BR>\n";
		printf("<strong>Number that have a patch:</strong> %d<BR>\n", $patchtotal);
		printf("<strong>Number that have a fix prepared and waiting to upload:</strong> %d<BR>\n", $pendingtotal);
		printf("<strong>Number that are being ignored:</strong> %d<BR>\n", $ignoretotal);
		printf("<strong>Number concerning the current stable release:</strong> %d<BR>\n", $stabletotal);
		printf("<strong>Number concerning the next release:</strong> %d<P>\n", $worrytotal);
	} else {
		print "Total number of release-critical bugs: $bugcount\n";
		printf("Number that have a patch: %d\n", $patchtotal);
		printf("Number that have a fix prepared and waiting to upload: %d\n", $pendingtotal);
		printf("Number that are being ignored: %d\n", $ignoretotal);
		printf("Number concerning the current stable release: %d\n", $stabletotal);
		printf("Number concerning the next release: %d\n", $worrytotal);
	}
}


sub FilterPackages($) {
	my $filter = shift;		# Distribution we want to keep

	for my $p (sort keys %scanlib::packagelist) {
		delete $scanlib::packagelist{$p} unless ($scanlib::section{$p} =~ m/^$filter/);
	}
}

sub FilterBugs() {
	for my $p (sort keys %scanlib::packagelist) {
		$scanlib::packagelist{$p} = [ grep { scanlib::check_worry($scanlib::bugs{$_}) } @{$scanlib::packagelist{$p}} ];
		delete $scanlib::packagelist{$p} if (scalar @{$scanlib::packagelist{$p}} == 0);
	}
}

sub FilterBugsStable() {
	for my $p (sort keys %scanlib::packagelist) {
		$scanlib::packagelist{$p} = [ grep { scanlib::check_worry_stable($scanlib::bugs{$_}) } @{$scanlib::packagelist{$p}} ];
		delete $scanlib::packagelist{$p} if (scalar @{$scanlib::packagelist{$p}} == 0);
	}
}

our ($opt_h,$opt_V,$opt_S,$opt_H,$opt_d,$opt_b,$opt_t,$opt_s,$opt_l);

getopts('VhHlsbtd:S:');
ShowUsage if ($opt_h);
ShowVersion if ($opt_V);
$statusfile=$opt_S if ($opt_S);
$html=1 if ($opt_H);

scanlib::readstatus($statusfile);

FilterPackages($opt_d) if ($opt_d);
FilterBugsStable() if ($opt_b);
FilterBugs() if ($opt_t);

MakeStatistics if ($opt_s);
if ($opt_l) {
	MakeBuglist();
}

exit 0;

